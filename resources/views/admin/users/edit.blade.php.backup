@extends('layouts.admin')

@section('content')
    <!-- Success/Status Messages (Minimal Design) -->
    @if(session('success'))
        <div class="mb-6 bg-green-50 border-l-4 border-green-400 p-4 rounded-r-lg">
            <div class="flex items-center">
                <i class="fas fa-check-circle text-green-500 mr-3"></i>
                <p class="text-green-700 font-medium">{{ session('success') }}</p>
            </div>
        </div>
    @endif

    @if(session('error'))
        <div class="mb-6 bg-red-50 border-l-4 border-red-400 p-4 rounded-r-lg">
            <div class="flex items-center">
                <i class="fas fa-exclamation-circle text-red-500 mr-3"></i>
                <p class="text-red-700 font-medium">{{ session('error') }}</p>
            </div>
        </div>
    @endif

    <!-- Page Header -->
    <div class="mb-8">
        <div class="flex items-center justify-between">
            <h1 class="text-3xl font-bold text-gray-900">Edit User</h1>
            <a href="{{ route('admin.users') }}"
               class="bg-gray-600 hover:bg-gray-700 text-white px-6 py-3 rounded-lg shadow-md font-semibold flex items-center transition-all duration-200">
                <i class="fas fa-arrow-left mr-2"></i> Back to Users
            </a>
        </div>
        <p class="mt-1 text-gray-600">Update user information and settings</p>
    </div>

    <!-- Edit User Form Card -->
    <div class="bg-white shadow-xl rounded-xl overflow-hidden border border-gray-100">
        <!-- Card Header with Gradient -->
        <div class="bg-gradient-to-r from-blue-600 via-blue-700 to-indigo-700 p-6 text-white">
            <div class="flex items-center justify-between">
                <div class="flex items-center">
                    <div class="h-12 w-12 rounded-full bg-white bg-opacity-20 flex items-center justify-center text-white font-bold mr-4">
                        <i class="fas fa-user-edit text-xl"></i>
                    </div>
                    <div>
                        <h2 class="text-xl font-bold">Edit User: {{ $user->name }}</h2>
                        <p class="text-blue-100 mt-1 text-sm">
                            Update user information and permissions
                        </p>
                    </div>
                </div>
                <div class="text-right">
                    <div class="bg-white bg-opacity-10 rounded-lg px-3 py-2">
                        <div class="text-xs text-blue-100">Role: {{ $user->role->name ?? 'N/A' }}</div>
                        <div class="text-sm font-semibold">{{ ucfirst($user->role->name ?? 'Unknown') }}</div>
                    </div>
                </div>
            </div>
        </div>

        <!-- Form Content -->
        <form action="{{ route('admin.users.update', $user) }}" method="POST" class="p-6 space-y-6">
            @csrf
            @method('PATCH')

            <!-- Basic Information Section -->
            <div class="bg-gray-50 rounded-lg p-6 form-section">
                <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-user mr-2 text-blue-600"></i>
                    Basic Information
                </h3>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="field-group">
                        <label for="name" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-signature mr-1 text-gray-500 field-icon"></i>
                            Full Name <span class="text-red-500">*</span>
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="The user's complete legal name as it should appear on bookings and certificates.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <input type="text" name="name" id="name" value="{{ old('name', $user->name) }}"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                            required>
                        @error('name')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>

                    <div class="field-group">
                        <label for="email" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-envelope mr-1 text-gray-500 field-icon"></i>
                            Email Address <span class="text-red-500">*</span>
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="Primary email for account access, booking confirmations, and important notifications. Must be unique in the system.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <input type="email" name="email" id="email" value="{{ old('email', $user->email) }}"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                            required>
                        @error('email')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>
                </div>
            </div>

            <!-- Password Section -->
            <div class="bg-gray-50 rounded-lg p-6 form-section">
                <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-lock mr-2 text-blue-600"></i>
                    Password Settings
                    <button type="button" class="ml-2 w-5 h-5 rounded-full bg-blue-100 text-blue-600 flex items-center justify-center text-xs hover:bg-blue-200 transition-colors help-tooltip" data-tooltip="As an admin, you can change any user's password without knowing their current password. Leave these fields empty to keep the current password unchanged.">
                        <i class="fas fa-question"></i>
                    </button>
                </h3>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="field-group">
                        <label for="password" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-key mr-1 text-gray-500 field-icon"></i>
                            New Password (Optional)
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="Leave empty to keep current password. Only fill this if you want to set a new password for this user.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <input type="password" name="password" id="password"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                            placeholder="Enter new password (optional)">
                        @error('password')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>

                    <div class="field-group">
                        <label for="password_confirmation" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-check-double mr-1 text-gray-500 field-icon"></i>
                            Confirm Password
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="Must match the new password above if you entered one.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <input type="password" name="password_confirmation" id="password_confirmation"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                            placeholder="Confirm new password">
                    </div>
                </div>
            </div>

            <!-- Role and Contact Information -->
            <div class="bg-gray-50 rounded-lg p-6 form-section">
                <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-id-card mr-2 text-blue-600"></i>
                    Role & Contact Information
                </h3>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="field-group">
                        <label for="role_id" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-shield-alt mr-1 text-gray-500 field-icon"></i>
                            User Role <span class="text-red-500">*</span>
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="Admin: Full system access. Instructor: Can manage bookings and schedule. Customer: Can make bookings only.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <select name="role_id" id="role_id"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                            required>
                            @foreach($roles as $role)
                                <option value="{{ $role->id }}" {{ old('role_id', $user->role_id) == $role->id ? 'selected' : '' }}>
                                    {{ ucfirst($role->name) }}
                                </option>
                            @endforeach
                        </select>
                        @error('role_id')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>

                    <div class="field-group">
                        <label for="phone" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-phone mr-1 text-gray-500 field-icon"></i>
                            Phone Number
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="Contact phone number for booking confirmations and emergency contact.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <input type="tel" name="phone" id="phone" value="{{ old('phone', $user->phone) }}"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200"
                            placeholder="e.g., +31 6 12345678">
                        @error('phone')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>
                </div>
            </div>

            <!-- Additional Information -->
            <div class="bg-gray-50 rounded-lg p-6 form-section role-transition">
                <h3 class="text-lg font-semibold text-gray-900 mb-4 flex items-center">
                    <i class="fas fa-info-circle mr-2 text-blue-600"></i>
                    Additional Information
                </h3>

                <div class="grid grid-cols-1 md:grid-cols-2 gap-6">
                    <div class="field-group">
                        <label for="address" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-map-marker-alt mr-1 text-gray-500 field-icon"></i>
                            Address
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="Full address including street, city, postal code. Optional but helpful for emergency contact.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <textarea name="address" id="address" rows="4"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200 resize-none"
                            placeholder="Enter full address">{{ old('address', $user->address) }}</textarea>
                        @error('address')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>

                    <div class="field-group">
                        <label for="experience_level" class="block text-sm font-bold text-gray-700 mb-2 flex items-center">
                            <i class="fas fa-star mr-1 text-gray-500 field-icon"></i>
                            Experience Level
                            <button type="button" class="ml-2 w-4 h-4 rounded-full bg-gray-100 text-gray-600 flex items-center justify-center text-xs hover:bg-gray-200 transition-colors help-tooltip" data-tooltip="For customers: their kitesurfing skill level. For instructors: their teaching experience level. Not used for admins.">
                                <i class="fas fa-question text-xs"></i>
                            </button>
                        </label>
                        <select name="experience_level" id="experience_level"
                            class="w-full px-4 py-3 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500 focus:border-blue-500 transition-all duration-200">
                            <option value="">- Select Experience Level -</option>
                            <option value="beginner" {{ old('experience_level', $user->experience_level) == 'beginner' ? 'selected' : '' }}>
                                🌱 Beginner
                            </option>
                            <option value="intermediate" {{ old('experience_level', $user->experience_level) == 'intermediate' ? 'selected' : '' }}>
                                📈 Intermediate
                            </option>
                            <option value="advanced" {{ old('experience_level', $user->experience_level) == 'advanced' ? 'selected' : '' }}>
                                🔥 Advanced
                            </option>
                            <option value="expert" {{ old('experience_level', $user->experience_level) == 'expert' ? 'selected' : '' }}>
                                🏆 Expert
                            </option>
                        </select>
                        @error('experience_level')
                            <p class="text-red-500 text-sm mt-2 flex items-center">
                                <i class="fas fa-exclamation-circle mr-1"></i>
                                {{ $message }}
                            </p>
                        @enderror
                    </div>
                </div>
            </div>

            <!-- Action Buttons -->
            <div class="flex justify-between items-center pt-6 border-t border-gray-200">
                <div class="text-sm text-gray-500">
                    <i class="fas fa-clock mr-1"></i>
                    Last updated: {{ $user->updated_at->format('M d, Y \a\t g:i A') }}
                </div>
                <div class="flex space-x-4">
                    <a href="{{ route('admin.users') }}"
                       class="px-6 py-3 bg-gray-500 text-white rounded-lg hover:bg-gray-600 transition-colors duration-200 font-semibold">
                        Cancel
                    </a>
                    <button type="submit"
                            class="px-8 py-3 bg-gradient-to-r from-blue-600 to-indigo-600 text-white rounded-lg hover:from-blue-700 hover:to-indigo-700 transition-all duration-200 font-semibold shadow-lg hover:shadow-xl transform hover:scale-105 flex items-center save-button-enhanced">
                        <i class="fas fa-save mr-2"></i>
                        Update User
                    </button>
                </div>
            </div>
        </form>
    </div>

    <!-- Enhanced User Edit Experience JavaScript -->
    <style>
        /* Enhanced Form Animations and Styling */
        .form-section {
            transition: all 0.3s ease;
            animation: slideInUp 0.6s ease-out;
        }

        .form-section:hover {
            transform: translateY(-1px);
            box-shadow: 0 8px 25px rgba(0, 0, 0, 0.08);
        }

        @keyframes slideInUp {
            from {
                opacity: 0;
                transform: translateY(20px);
            }
            to {
                opacity: 1;
                transform: translateY(0);
            }
        }

        .field-group {
            position: relative;
            animation: fadeInLeft 0.8s ease-out;
        }

        @keyframes fadeInLeft {
            from {
                opacity: 0;
                transform: translateX(-10px);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }

        .field-group input:focus,
        .field-group select:focus,
        .field-group textarea:focus {
            transform: scale(1.02);
            transition: all 0.2s ease;
        }

        .field-group input:focus + .field-icon,
        .field-group select:focus + .field-icon,
        .field-group textarea:focus + .field-icon {
            color: #3b82f6;
            transform: scale(1.1);
        }

        .validation-success {
            animation: successPulse 0.6s ease;
        }

        .validation-error {
            animation: errorShake 0.6s ease;
        }

        @keyframes successPulse {
            0% { transform: scale(1); }
            50% { transform: scale(1.05); }
            100% { transform: scale(1); }
        }

        @keyframes errorShake {
            0%, 100% { transform: translateX(0); }
            25% { transform: translateX(-5px); }
            75% { transform: translateX(5px); }
        }

        .unsaved-indicator {
            position: relative;
        }

        .unsaved-indicator::after {
            content: '';
            position: absolute;
            top: -2px;
            right: -2px;
            width: 8px;
            height: 8px;
            background-color: #f59e0b;
            border-radius: 50%;
            animation: pulse 2s infinite;
        }

        @keyframes pulse {
            0%, 100% { opacity: 1; }
            50% { opacity: 0.5; }
        }

        .role-transition {
            transition: all 0.5s ease;
        }

        .fade-in {
            animation: fadeIn 0.5s ease;
        }

        .fade-out {
            animation: fadeOut 0.5s ease;
        }

        @keyframes fadeIn {
            from { opacity: 0; transform: translateY(10px); }
            to { opacity: 1; transform: translateY(0); }
        }

        @keyframes fadeOut {
            from { opacity: 1; transform: translateY(0); }
            to { opacity: 0; transform: translateY(-10px); }
        }

        /* Tooltip Styles */
        .help-tooltip {
            position: relative;
            display: inline-flex;
            align-items: center;
            justify-content: center;
            cursor: help;
            z-index: 10;
            transition: all 0.2s ease;
        }

        .help-tooltip:hover {
            transform: scale(1.15);
            background-color: #dbeafe;
        }

        .help-tooltip:active {
            transform: scale(1.05);
        }

        .tooltip {
            position: absolute;
            bottom: 130%;
            left: 50%;
            transform: translateX(-50%);
            background: linear-gradient(135deg, #1f2937 0%, #374151 100%);
            color: white;
            padding: 10px 14px;
            border-radius: 8px;
            font-size: 12px;
            font-weight: 500;
            max-width: 280px;
            white-space: normal;
            text-align: left;
            line-height: 1.4;
            z-index: 1000;
            opacity: 0;
            visibility: hidden;
            transition: all 0.3s cubic-bezier(0.68, -0.55, 0.265, 1.55);
            transform: translateX(-50%) translateY(10px) scale(0.8);
            box-shadow: 0 10px 25px rgba(0, 0, 0, 0.2);
            border: 1px solid rgba(255, 255, 255, 0.1);
        }

        .tooltip::after {
            content: '';
            position: absolute;
            top: 100%;
            left: 50%;
            transform: translateX(-50%);
            border: 6px solid transparent;
            border-top-color: #1f2937;
            filter: drop-shadow(0 2px 2px rgba(0, 0, 0, 0.1));
        }

        .tooltip.show {
            opacity: 1;
            visibility: visible;
            transform: translateX(-50%) translateY(0) scale(1);
        }

        /* Responsive tooltip positioning */
        @media (max-width: 768px) {
            .tooltip {
                position: fixed;
                bottom: auto;
                top: 50%;
                left: 50%;
                transform: translate(-50%, -50%);
                max-width: 90vw;
                z-index: 9999;
            }

            .tooltip::after {
                display: none;
            }

            .tooltip.show {
                transform: translate(-50%, -50%) scale(1);
            }
        }

        .progress-bar {
            transition: width 0.3s ease;
        }

        .save-button-enhanced {
            position: relative;
            overflow: hidden;
            transition: all 0.3s ease;
        }

        .save-button-enhanced:hover {
            transform: translateY(-2px);
            box-shadow: 0 10px 20px rgba(59, 130, 246, 0.3);
        }

        .save-button-enhanced::before {
            content: '';
            position: absolute;
            top: 50%;
            left: 50%;
            width: 0;
            height: 0;
            background: rgba(255, 255, 255, 0.2);
            border-radius: 50%;
            transform: translate(-50%, -50%);
            transition: width 0.6s, height 0.6s;
        }

        .save-button-enhanced:hover::before {
            width: 300px;
            height: 300px;
        }

        /* Notification Toast Animations */
        .notification-toast {
            animation: slideInRight 0.3s ease-out;
        }

        @keyframes slideInRight {
            from {
                opacity: 0;
                transform: translateX(100%);
            }
            to {
                opacity: 1;
                transform: translateX(0);
            }
        }
    </style>

    <script>
        document.addEventListener('DOMContentLoaded', function() {
            const form = document.querySelector('form');
            const passwordField = document.getElementById('password');
            const confirmPasswordField = document.getElementById('password_confirmation');
            const passwordSection = passwordField.closest('.bg-gradient-to-r');
            const roleSelect = document.getElementById('role_id');
            const experienceField = document.getElementById('experience_level');
            const submitButton = document.querySelector('button[type="submit"]');

            let hasUnsavedChanges = false;
            let originalFormData = new FormData(form);

            // Password Management Enhancement
            function updatePasswordFieldState() {
                const hasPassword = passwordField.value.length > 0;

                // Update confirmation field state
                if (hasPassword) {
                    confirmPasswordField.removeAttribute('disabled');
                    confirmPasswordField.closest('div').style.opacity = '1';
                    confirmPasswordField.required = true;

                    // Add password strength indicator
                    showPasswordStrength(passwordField.value);
                } else {
                    confirmPasswordField.value = '';
                    confirmPasswordField.closest('div').style.opacity = '0.7';
                    confirmPasswordField.required = false;
                    hidePasswordStrength();
                }

                // Visual feedback for password section
                if (hasPassword) {
                    passwordSection.classList.remove('from-green-50', 'to-emerald-50', 'border-green-200');
                    passwordSection.classList.add('from-orange-50', 'to-amber-50', 'border-orange-200');
                } else {
                    passwordSection.classList.remove('from-orange-50', 'to-amber-50', 'border-orange-200');
                    passwordSection.classList.add('from-green-50', 'to-emerald-50', 'border-green-200');
                }
            }

            // Password Strength Indicator
            function showPasswordStrength(password) {
                let strengthIndicator = document.getElementById('password-strength');
                if (!strengthIndicator) {
                    strengthIndicator = document.createElement('div');
                    strengthIndicator.id = 'password-strength';
                    strengthIndicator.className = 'mt-2 text-sm';
                    passwordField.parentNode.appendChild(strengthIndicator);
                }

                const strength = calculatePasswordStrength(password);
                const colors = {
                    weak: 'text-red-600',
                    fair: 'text-orange-600',
                    good: 'text-blue-600',
                    strong: 'text-green-600'
                };

                strengthIndicator.className = `mt-2 text-sm font-medium ${colors[strength.level]}`;
                strengthIndicator.innerHTML = `
                    <div class="flex items-center">
                        <i class="fas fa-shield-alt mr-2"></i>
                        Password Strength: ${strength.level.toUpperCase()} ${strength.emoji}
                    </div>
                    <div class="w-full bg-gray-200 rounded-full h-2 mt-1">
                        <div class="h-2 rounded-full transition-all duration-300" style="width: ${strength.percentage}%; background-color: ${strength.color};"></div>
                    </div>
                `;
            }

            function hidePasswordStrength() {
                const strengthIndicator = document.getElementById('password-strength');
                if (strengthIndicator) {
                    strengthIndicator.remove();
                }
            }

            function calculatePasswordStrength(password) {
                let score = 0;
                if (password.length >= 8) score += 25;
                if (/[a-z]/.test(password)) score += 25;
                if (/[A-Z]/.test(password)) score += 25;
                if (/[0-9]/.test(password)) score += 15;
                if (/[^A-Za-z0-9]/.test(password)) score += 10;

                if (score < 40) return { level: 'weak', percentage: score, color: '#ef4444', emoji: '⚠️' };
                if (score < 70) return { level: 'fair', percentage: score, color: '#f97316', emoji: '📈' };
                if (score < 85) return { level: 'good', percentage: score, color: '#3b82f6', emoji: '✅' };
                return { level: 'strong', percentage: 100, color: '#10b981', emoji: '🔒' };
            }

            // Role-Based Field Visibility
            function updateFieldVisibility() {
                const selectedRole = roleSelect.options[roleSelect.selectedIndex];
                const roleName = selectedRole ? selectedRole.text.toLowerCase() : '';

                const experienceDiv = experienceField.closest('div');

                if (roleName.includes('instructor')) {
                    experienceDiv.style.display = 'block';
                    experienceField.required = true;
                    experienceDiv.querySelector('label').innerHTML = '<i class="fas fa-star mr-1 text-gray-500"></i>Teaching Experience Level <span class="text-red-500">*</span>';
                } else if (roleName.includes('admin')) {
                    experienceDiv.style.display = 'none';
                    experienceField.required = false;
                } else {
                    experienceDiv.style.display = 'block';
                    experienceField.required = false;
                    experienceDiv.querySelector('label').innerHTML = '<i class="fas fa-star mr-1 text-gray-500"></i>Kitesurfing Experience Level';
                }
            }

            // Real-time Validation
            function validateField(field) {
                const value = field.value.trim();
                let isValid = true;
                let message = '';

                switch (field.name) {
                    case 'email':
                        const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                        isValid = emailRegex.test(value);
                        message = isValid ? '' : 'Please enter a valid email address';
                        break;
                    case 'phone':
                        if (value) {
                            const phoneRegex = /^[\+]?[0-9\s\-\(\)]+$/;
                            isValid = phoneRegex.test(value) && value.replace(/\D/g, '').length >= 8;
                            message = isValid ? '' : 'Please enter a valid phone number';
                        }
                        break;
                    case 'name':
                        isValid = value.length >= 2;
                        message = isValid ? '' : 'Name must be at least 2 characters long';
                        break;
                }

                showFieldValidation(field, isValid, message);
                return isValid;
            }

            function showFieldValidation(field, isValid, message) {
                // Remove existing validation
                const existingError = field.parentNode.querySelector('.validation-message');
                if (existingError) existingError.remove();

                // Update field styling
                if (isValid) {
                    field.classList.remove('border-red-500', 'focus:ring-red-500');
                    field.classList.add('border-green-500', 'focus:ring-green-500');
                } else {
                    field.classList.remove('border-green-500', 'focus:ring-green-500');
                    field.classList.add('border-red-500', 'focus:ring-red-500');

                    if (message) {
                        const errorDiv = document.createElement('div');
                        errorDiv.className = 'validation-message text-red-500 text-sm mt-1 flex items-center';
                        errorDiv.innerHTML = `<i class="fas fa-exclamation-circle mr-1"></i>${message}`;
                        field.parentNode.appendChild(errorDiv);
                    }
                }
            }

            // Track Changes for Unsaved Warning
            function trackChanges() {
                const currentFormData = new FormData(form);
                hasUnsavedChanges = false;

                for (let [key, value] of currentFormData.entries()) {
                    if (originalFormData.get(key) !== value) {
                        hasUnsavedChanges = true;
                        break;
                    }
                }

                updateSaveButtonState();
            }

            function updateSaveButtonState() {
                if (hasUnsavedChanges) {
                    submitButton.classList.add('ring-4', 'ring-blue-300', 'ring-opacity-50');
                    submitButton.innerHTML = '<i class="fas fa-save mr-2"></i>Save Changes';
                } else {
                    submitButton.classList.remove('ring-4', 'ring-blue-300', 'ring-opacity-50');
                    submitButton.innerHTML = '<i class="fas fa-check mr-2"></i>No Changes';
                }
            }

            // Event Listeners
            passwordField.addEventListener('input', updatePasswordFieldState);
            roleSelect.addEventListener('change', updateFieldVisibility);

            // Real-time validation for key fields
            ['name', 'email', 'phone'].forEach(fieldName => {
                const field = document.getElementById(fieldName);
                if (field) {
                    field.addEventListener('blur', () => validateField(field));
                    field.addEventListener('input', trackChanges);
                }
            });

            // Track changes on all form inputs
            form.addEventListener('input', trackChanges);
            form.addEventListener('change', trackChanges);

            // Form submission with enhanced feedback
            form.addEventListener('submit', function(e) {
                let isFormValid = true;

                // Show subtle loading state immediately
                submitButton.style.transform = 'scale(0.98)';
                submitButton.style.transition = 'all 0.2s ease';

                // Validate all required fields
                ['name', 'email'].forEach(fieldName => {
                    const field = document.getElementById(fieldName);
                    if (field && !validateField(field)) {
                        isFormValid = false;
                    }
                });

                // Password validation
                if (passwordField.value && !confirmPasswordField.value) {
                    e.preventDefault();
                    showFieldValidation(confirmPasswordField, false, 'Please confirm the new password');
                    confirmPasswordField.focus();
                    resetSubmitButton();
                    return;
                }

                if (passwordField.value && passwordField.value !== confirmPasswordField.value) {
                    e.preventDefault();
                    showFieldValidation(confirmPasswordField, false, 'Passwords do not match');
                    confirmPasswordField.focus();
                    resetSubmitButton();
                    return;
                }

                if (!isFormValid) {
                    e.preventDefault();
                    resetSubmitButton();

                    // Scroll to first error with smooth animation
                    const firstError = document.querySelector('.border-red-500');
                    if (firstError) {
                        firstError.scrollIntoView({ behavior: 'smooth', block: 'center' });
                        setTimeout(() => firstError.focus(), 300);
                    }

                    // Show error notification
                    showNotification('Please fix the errors above before saving.', 'error');
                    return;
                }

                // Show success loading state
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="fas fa-spinner fa-spin mr-2"></i>Saving Changes...';
                submitButton.classList.add('opacity-75');

                // Show optimistic success message
                showNotification('Saving user changes...', 'info');
            });

            function resetSubmitButton() {
                submitButton.style.transform = 'scale(1)';
                submitButton.disabled = false;
                submitButton.innerHTML = '<i class="fas fa-save mr-2"></i>Update User';
                submitButton.classList.remove('opacity-75');
            }

            function showNotification(message, type = 'info') {
                const colors = {
                    success: 'bg-green-500',
                    error: 'bg-red-500',
                    info: 'bg-blue-500',
                    warning: 'bg-yellow-500'
                };

                const icons = {
                    success: 'fas fa-check',
                    error: 'fas fa-exclamation-triangle',
                    info: 'fas fa-info-circle',
                    warning: 'fas fa-exclamation-circle'
                };

                // Remove existing notifications
                document.querySelectorAll('.notification-toast').forEach(el => el.remove());

                const notification = document.createElement('div');
                notification.className = `notification-toast fixed top-4 right-4 ${colors[type]} text-white px-4 py-3 rounded-lg shadow-lg z-50 text-sm opacity-0 transform translate-x-full transition-all duration-300`;
                notification.innerHTML = `<i class="${icons[type]} mr-2"></i>${message}`;

                document.body.appendChild(notification);

                // Animate in
                setTimeout(() => {
                    notification.style.opacity = '1';
                    notification.style.transform = 'translateX(0)';
                }, 100);

                // Auto-hide after 3 seconds
                setTimeout(() => {
                    notification.style.opacity = '0';
                    notification.style.transform = 'translateX(100%)';
                    setTimeout(() => notification.remove(), 300);
                }, 3000);
            }

            // Warn about unsaved changes
            window.addEventListener('beforeunload', function(e) {
                if (hasUnsavedChanges) {
                    e.preventDefault();
                    e.returnValue = '';
                }
            });

            // Initialize Tooltip System
            function initializeTooltips() {
                const tooltipButtons = document.querySelectorAll('.help-tooltip');

                tooltipButtons.forEach(button => {
                    const tooltipText = button.getAttribute('data-tooltip');
                    if (!tooltipText) return;

                    // Create tooltip element
                    const tooltip = document.createElement('div');
                    tooltip.className = 'tooltip';
                    tooltip.textContent = tooltipText;
                    button.appendChild(tooltip);

                    // Click event for mobile/touch devices
                    button.addEventListener('click', function(e) {
                        e.preventDefault();
                        e.stopPropagation();

                        // Hide all other tooltips
                        document.querySelectorAll('.tooltip').forEach(t => {
                            if (t !== tooltip) {
                                t.classList.remove('show');
                            }
                        });

                        // Toggle current tooltip
                        tooltip.classList.toggle('show');
                    });

                    // Hover events for desktop
                    button.addEventListener('mouseenter', function() {
                        tooltip.classList.add('show');
                    });

                    button.addEventListener('mouseleave', function() {
                        tooltip.classList.remove('show');
                    });
                });

                // Hide tooltips when clicking outside
                document.addEventListener('click', function(e) {
                    if (!e.target.closest('.help-tooltip')) {
                        document.querySelectorAll('.tooltip').forEach(tooltip => {
                            tooltip.classList.remove('show');
                        });
                    }
                });
            }

            // Initialize
            updatePasswordFieldState();
            updateFieldVisibility();
            trackChanges();
            initializeTooltips();

            // Reduced auto-save notification frequency (less intrusive)
            let lastNotificationTime = 0;
            setInterval(() => {
                if (hasUnsavedChanges && Date.now() - lastNotificationTime > 60000) { // Only every 60 seconds
                    const indicator = document.createElement('div');
                    indicator.className = 'fixed top-4 right-4 bg-blue-500 text-white px-3 py-2 rounded-lg shadow-lg z-50 text-sm opacity-90';
                    indicator.innerHTML = '<i class="fas fa-edit mr-2"></i>Unsaved changes';

                    // Remove existing indicators
                    document.querySelectorAll('.fixed.top-4.right-4').forEach(el => el.remove());

                    document.body.appendChild(indicator);
                    lastNotificationTime = Date.now();

                    setTimeout(() => {
                        if (indicator.parentNode) {
                            indicator.style.transition = 'opacity 0.3s';
                            indicator.style.opacity = '0';
                            setTimeout(() => indicator.remove(), 300);
                        }
                    }, 2000); // Show for 2 seconds instead of 3
                }
            }, 30000); // Check every 30 seconds
        });
    </script>
@endsection
